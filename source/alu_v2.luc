module alu_v2 #(
    SIZE = 32 : SIZE > 1
)
(
    input a[SIZE],
    input b[SIZE],
    input alufn[6],
    output out[SIZE],
    output z,
    output v,
    output n
) {
    
    adder adder(#SIZE(SIZE))
    compare compare(#SIZE(SIZE))
    multiplier multiplier
    divider divider(#SIZE(SIZE))
    boolean boolean(#SIZE(SIZE))
    shifter shifter(#SIZE(32))
    mux_2 small_mux(#SIZE(32))
    mux_4_32 big_mux
    sig conditions[4][32]
    
    always {
        
        adder.a = a
        adder.b = b
        adder.alufn_signal = alufn[0]
        z = adder.z
        v = adder.v
        n = adder.n
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn[3:0]
        shifter.a = a
        shifter.b = b[4:0]
        shifter.alufn = alufn[1:0]
        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        
        compare.alufn = alufn[2:1]
        multiplier.a = a
        multiplier.b = b
        divider.a = a
        divider.b = b
        
        /* Small Mux */
        small_mux.s0 = alufn[1]
        small_mux.inp1 = adder.out
        small_mux.inp2 = multiplier.mul
        
        /* Inputs for Big Mux */
        conditions[0] = small_mux.out
        conditions[1] = boolean.bool
        conditions[2] = shifter.result
        conditions[3] = c{31b0, compare.cmp}
        
        /* Big Mux */
        big_mux.s0 = alufn[4]
        big_mux.s1 = alufn[5]
        big_mux.in = conditions
        
        out = big_mux.out 
        
    }
}