module game_datapath_v2 #(
    
    SLOW_CLOCK_DIV ~ 5d26 : SLOW_CLOCK_DIV > 0,
    FAST_CLOCK_DIV ~ 5d21 : FAST_CLOCK_DIV > 0
    
)(
    input clk,  // clock
    input rst,  // reset
    
    input button0,
    input button1,
    input button2,
    input button3,
    input button4,
    
    output current_mole_index_out[3],
    output timer_out[32],
    output current_score[32],
    output alu_out[8],
    output debug[8],
    output regfile_data_write_inp[8],
    output mole_timer_clock_out,
    output asel_out[8],
    output fsm_state_out[5]
    
) {
    
    // temporary variables
    sig input_alu_a[32]
    sig input_alu_b[32]
    sig regfile_data_write[32]
    
    /* instantiate alu module here */
    alu_v2 alu
    
    .clk(clk) {
        
        counter mole_timer_clock(#SIZE(1), #DIV(SLOW_CLOCK_DIV), .rst(rst))
        edge_detector edge_detector_mole_timer(#RISE(1), #FALL(0), .in(mole_timer_clock.value))
        
        counter rng_generator_clock(#SIZE(1), #DIV(SLOW_CLOCK_DIV), .rst(rst))
        
        /* Instantiate helper module: random_number_generator */
        random_number_generator generator(.slow_clk(rng_generator_clock.value), .refresh(button0))
        
        game_cu_v2 game_cu(
            .rst(rst),
            .decrease_timer(edge_detector_mole_timer.out),
            .button0(button0),
            .button1(button1),
            .button2(button2),
            .button3(button3),
            .button4(button4)
        )
        
        regfiles regfile(
            .rst(rst),
            .we(game_cu.regfile_we),
            .wa(game_cu.regfile_wa),
            .ra_in(game_cu.regfile_ra1),
            .rb_in(game_cu.regfile_ra2)
        )
        
    }
    
    always {
        
        fsm_state_out = game_cu.fsm_state
        
        input_alu_a = 0
        input_alu_b = 0
        regfile_data_write = 0
        
        alu_out = alu.out[7:0]
        debug = game_cu.debug
        
        game_cu.regfile_rb_out = regfile.rb_out
        
        /* asel mux */
        case (game_cu.asel) {
            b00: input_alu_a = regfile.ra_out
            b11: input_alu_a = 32d5
            b10: input_alu_a = 32d1
        }
        
        /* bsel mux */
        case (game_cu.bsel) {
            b00: input_alu_b = regfile.rb_out
            b01: input_alu_b = 32d0
            b11: input_alu_b = 32d5
            b10: input_alu_b = 32d1
        }
        
        /* insert alu assignments here */
        asel_out = input_alu_a 
        
        alu.a = input_alu_a
        alu.b = input_alu_b
        alu.alufn = game_cu.alufn
        
        /* wdsel mux */
        case (game_cu.alu_out_sel) {
            b000: regfile_data_write = alu.out
            b001: regfile_data_write = generator.out
            b010: regfile_data_write = 32d0
            b011: regfile_data_write = 32d1
            b100: regfile_data_write = 32d2
            b101: regfile_data_write = 32d3
            b110: regfile_data_write = 32d4
            b111: regfile_data_write = 32d10
        }
        
        regfile.data = regfile_data_write
        
        current_mole_index_out = regfile.currentMoleIndex_out
        timer_out = regfile.timer_out
        current_score = regfile.current_score_out
        
        regfile_data_write_inp = regfile_data_write[7:0]
        mole_timer_clock_out = mole_timer_clock.value
        
    }
}