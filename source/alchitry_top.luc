module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLOCK_DIVIDER = $is_sim() ? 5d9 : 5d24
    const FAST_CLOCK_DIV = $is_sim() ? 5d7 : 5d18
    const CLK_FREQ = $is_sim() ? 1000 : 10000000
    
    .clk(clk) {
        
        reset_conditioner reset_cond
        
        edge_detector edge_button0(#RISE(1), #FALL(0))
        edge_detector edge_button1(#RISE(1), #FALL(0))
        edge_detector edge_button2(#RISE(1), #FALL(0))
        edge_detector edge_button3(#RISE(1), #FALL(0))
        edge_detector edge_button4(#RISE(1), #FALL(0))
        
        button_conditioner cond_button0(#CLK_FREQ(CLK_FREQ))
        button_conditioner cond_button1(#CLK_FREQ(CLK_FREQ))
        button_conditioner cond_button2(#CLK_FREQ(CLK_FREQ))
        button_conditioner cond_button3(#CLK_FREQ(CLK_FREQ))
        button_conditioner cond_button4(#CLK_FREQ(CLK_FREQ))
        
        .rst(rst) {
            multi_seven_seg seg (#DIV($is_sim() ? 1 : 16), #DIGITS(4))
            /* Instantiate datapath */
            //game_datapath datapath (#SLOW_CLOCK_DIV(CLOCK_DIVIDER), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
            game_datapath_v2 datapath (#SLOW_CLOCK_DIV(CLOCK_DIVIDER), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
        }
        
    }
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        
        /* Reset configurations */
        reset_cond.in = ~rst_n
        rst = reset_cond.out
        
        /* Default values for peripherals */
        io_led = 3x{{8h0}}
        led = 8h0
        io_segment = 8h00
        io_select = 4hF
        
        /* Button Conditioner configurations */
        cond_button0.in = io_button[0]
        cond_button1.in = io_button[1]
        cond_button2.in = io_button[2]
        cond_button3.in = io_button[3]
        cond_button4.in = io_button[4]
        
        edge_button0.in = cond_button0.out
        edge_button1.in = cond_button1.out
        edge_button2.in = cond_button2.out
        edge_button3.in = cond_button3.out
        edge_button4.in = cond_button4.out
        
        datapath.button0 = edge_button0.out
        datapath.button1 = edge_button1.out
        datapath.button2 = edge_button2.out
        datapath.button3 = edge_button3.out
        datapath.button4 = edge_button4.out
        
        io_segment = seg.seg // changed from ~seg.seg because 7 seg is CC
        io_select = ~seg.sel
        
        usb_tx = usb_rx         // loop serial port
        
        
        decimal_renderer.value = datapath.current_score[13:0]
        seg.values = decimal_renderer.digits
        
        
        //io_led[1] = mole_timer
        case (io_dip[2]){
            b00:
                io_led[0][datapath.current_mole_index_out] = 1
            b01:
                io_led[0] = datapath.timer_out
            
        }
        
        if (datapath.fsm_state_out == 5d2) {
            io_led[0][datapath.current_mole_index_out] = 1
        }
        
        else if (datapath.fsm_state_out == 5d9) { // 
            decimal_renderer.value = datapath.current_score[13:0]
            seg.values = decimal_renderer.digits
        }
        
        else if (datapath.fsm_state_out == 5d19) { // if RESTART
            io_led[0] = 8b11111111
        }
        
        else {
            io_led[0] = 8b00000000
        }
        
        io_led[1] = datapath.timer_out
        io_led[2] = datapath.debug
        led[0] = datapath.mole_timer_clock_out
        
        
    }
}