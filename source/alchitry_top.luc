module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    sig current_mole_index[3]
    sig mole_timer[32]
    sig current_score[32]
    const CLOCK_DIVIDER = $is_sim() ? 9 : 26
    const FAST_CLOCK_DIV = $is_sim() ? 7 : 21
    const CLK_FREQ = $is_sim() ? 1000 : 10000000
    
    .clk(clk) {
        
        reset_conditioner reset_cond
        
        edge_detector io_button_edge[5](#RISE({1, 1, 1, 1, 1}), #FALL({0, 0, 0, 0, 0}))
        button_conditioner io_button_cond[5](#CLK_FREQ({CLK_FREQ, CLK_FREQ, CLK_FREQ, CLK_FREQ, CLK_FREQ}))
        
        multi_seven_seg seg (#DIV($is_sim() ? 1 : 16), #DIGITS(4), .rst(rst))
        
        /* Instantiate datapath */
        game_datapath datapath (
            #SLOW_CLOCK_DIV(CLOCK_DIVIDER),
            #FAST_CLOCK_DIV(FAST_CLOCK_DIV),
            .rst(rst),
            .button0(io_button_edge.out[0]),
            .button1(io_button_edge.out[1]),
            .button2(io_button_edge.out[2]),
            .button3(io_button_edge.out[3]),
            .button4(io_button_edge.out[4])
        )
        
    }
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        
        /* Default values for peripherals */
        io_led = 3x{{8h0}}
        led = 8h0
        io_segment = 8h00
        io_select = 4hF
        
        /* Reset configurations */
        reset_cond.in = ~rst_n
        rst = reset_cond.out
        
        /* Button Conditioner configurations */
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
        
        io_segment = ~seg.seg // changed from ~seg.seg because 7 seg is CC
        io_select = ~seg.sel
        
        usb_tx = usb_rx         // loop serial port
        
        current_mole_index = datapath.current_mole_index_out
        mole_timer = datapath.timer_out
        current_score = datapath.current_score
        
        //decimal_renderer.value = current_score[13:0]
        decimal_renderer.value = mole_timer
        seg.values = decimal_renderer.digits
        
        io_led[0][current_mole_index] = 1
        //io_led[1] = mole_timer
        
    }
}