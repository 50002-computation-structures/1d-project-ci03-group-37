module game_cu (
    input clk,  // clock
    input rst,  // reset
    input regfile_rb_out[32], // direct reading of regfile data from rb_out
    input decrease_timer,
    input button0,
    input button1,
    input button2,
    input button3,
    input button4,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output alu_out_sel[3],
    output regfile_wa[3],
    output regfile_ra1[3],
    output regfile_ra2[3],
    output regfile_we,
    output debug[8]
) {
    
    enum States {
        IDLE,
        SPAWN_MOLE,
        WAIT_INPUT,
        CHECK_HIT,
        BRANCH_CHECKHIT,
        UPDATE_SCORE,
        CHECK_MOLETIMER,
        BRANCH_MOLETIMER,
        DECREASE_MOLETIMER,
        GAMEOVER,
        RESET_TIMER,
        SET_POINTS,
        WAIT_BRANCH_MOLETIMER,
        CHECK_SCORE,
        BRANCH_CHECKSCORE,
        DECREASE_MOLE_TIMER
        
    }
    
    dff game_fsm[$width(States)](#INIT(States.IDLE), .clk(clk), .rst(rst))
    
    always {
        debug = 0
        alufn = 0
        asel = 0 
        bsel = 0
        regfile_we = 0
        regfile_wa = 0
        regfile_ra1 = d0
        regfile_ra2 = d0
        alu_out_sel = 0
        
        game_fsm.d = game_fsm.q
        
        if (rst) {
            game_fsm.d = States.IDLE
        }
        
        else {
            
            case (game_fsm.q) {
                
                States.IDLE: /* This state is the "HOME PAGE" */
                    debug = 8d1
                    if (button0) { /* "START" button */
                        game_fsm.d = States.SPAWN_MOLE
                    }
                    
                    else {
                        game_fsm.d = States.IDLE
                    }
                
                
                States.SPAWN_MOLE: /* This state writes an RNG number to currentMoleIndex */
                    alu_out_sel = b001 // read the random number generator output
                    regfile_wa = d0 // write to currentMoleIndex
                    regfile_we = 1 // write enabled
                    game_fsm.d = States.WAIT_INPUT
                    debug = 8d3               
                
                /*
                // test read the timer, loop here
                regfile_ra1 = d1 // moleTimer register to read
                asel = b00
                alufn = b011010 // "A" operation selected
                debug = 8h0F
                */                
                
                
                States.RESET_TIMER: /* This state resets the timer to 10 when a correctHit is detected */
                    alufn = b011010
                    asel = b11
                    bsel = 0
                    regfile_ra1 = d0 
                    regfile_ra2 = d0 
                    alu_out_sel = b000
                    regfile_wa = d1
                    regfile_we = 1
                    game_fsm.d = States.SPAWN_MOLE
                    debug = 8d4
                
                
                States.WAIT_INPUT:
                    if (decrease_timer) {
                        game_fsm.d = States.CHECK_MOLETIMER
                    }
                    else if (button0) { /* if top button is pressed */
                        regfile_we = 1
                        regfile_wa = d2 // buttonPressed register selected!
                        alu_out_sel = b010 // Decimal 0 selected!
                        game_fsm.d = States.CHECK_HIT
                        // debug = 8d13
                    }
                    else if (button1) { /* if middle button is pressed */
                        regfile_we = 1
                        regfile_wa = d2 // buttonPressed register selected!
                        alu_out_sel = b011 // Decimal 1 selected!
                        game_fsm.d = States.CHECK_HIT
                        // debug = 8d14
                    }
                    else if (button2) { /* if bottom button is pressed */
                        regfile_we = 1
                        regfile_wa = d2 // buttonPressed register selected!
                        alu_out_sel = b100 // Decimal 2 selected!
                        game_fsm.d = States.CHECK_HIT
                        // debug = 8d15
                    }
                    else if (button3) { /* if left button is pressed */
                        regfile_we = 1
                        regfile_wa = d2 // buttonPressed register selected!
                        alu_out_sel = b101 // Decimal 3 selected!
                        game_fsm.d = States.CHECK_HIT
                        // debug = 8d16
                    }
                    else if (button4) { /* if right button is pressed */
                        regfile_we = 1
                        regfile_wa = d2 // buttonPressed register selected!
                        alu_out_sel = b110 // Decimal 4 selected!
                        game_fsm.d = States.CHECK_HIT
                        // debug = 8d17
                        
                    }
                    else {
                        game_fsm.d = States.WAIT_INPUT
                        debug = 8d5
                    }
                
                
                States.CHECK_HIT:
                    alufn = b110011 // Compare EQUALS function selected!
                    asel = b00
                    bsel = b00
                    regfile_ra1 = d2 // buttonPressed register selected!
                    regfile_ra2 = d0 // currentMoleIndex register selected!
                    alu_out_sel = b000 // ALU's output selected!
                    regfile_wa = d6 // Stores result in temporary register
                    regfile_we = 1 // Write Enabled!
                    game_fsm.d = States.BRANCH_CHECKHIT
                    debug = 8d6
                
                
                States.BRANCH_CHECKHIT:
                    regfile_ra2 = d6
                    if (regfile_rb_out[0]) { // if player hits the mole
                        game_fsm.d = States.UPDATE_SCORE
                    } else { // if player doesn't hit the correct mole
                        game_fsm.d = States.GAMEOVER
                    }
                    debug = 8d7
                
                
                States.UPDATE_SCORE:
                    alufn = b000000 // Addition function selected!
                    regfile_ra1 = d3 // currentScore register selected!
                    regfile_ra2 = d4 // pointsPerHit register selected!
                    asel = b00
                    bsel = b00 // Decimal 1 is selected
                    regfile_we = 1 // Write Enabled!
                    regfile_wa = d3 // currentScore is the Write Addr
                    alu_out_sel = b000
                    game_fsm.d = States.RESET_TIMER
                    debug = 8d8
                
                /*States.CHECK_SCORE:
                    alufn = b110011 // Compare Equal
                    regfile_ra1 = d3 // currentScore register selected!
                    regfile_ra2 = d0
                    asel = b00 // pass currentScore content
                    bsel = b11 // Decimal 5 is selected
                    regfile_we = 1 // Write Enabled!
                    regfile_wa = d6 // Write to temp register
                    alu_out_sel = b000
                    game_fsm.d = States.BRANCH_CHECKSCORE*/
                
                /*States.BRANCH_CHECKSCORE:
                    regfile_ra2 = d6
                    if (regfile_rb_out[0]) { // score is indeed less than 5
                        game_fsm.d = States.RESET_TIMER
                    } else { // if its more than 5
                        game_fsm.d = States.DECREASE_MOLE_TIMER
                    }*/
                
                /*States.DECREASE_MOLE_TIMER:
                    alufn = 0 // don't care what this is
                    regfile_ra1 = d0
                    regfile_ra2 = d0
                    asel = b00 
                    bsel = b00 
                    regfile_we = 1 // Write Enabled!
                    regfile_wa = d1 // Write to moleTimer register
                    alu_out_sel = b110
                    game_fsm.d = States.SPAWN_MOLE*/
                
                
                States.CHECK_MOLETIMER:
                    alufn = b110011 // Compare Equals function selected!
                    regfile_ra1 = d1 // moleTimer register selected!
                    regfile_ra2 = d0
                    asel = b00
                    bsel = b01 // Decimal 0 is selected!
                    regfile_we = 1 // Write Enabled!
                    regfile_wa = d6 // Stores result in temporary register (to be read next cycle)
                    alu_out_sel = b000
                    game_fsm.d = States.BRANCH_MOLETIMER
                    
                    debug = 8d9
                
            /*
            States.WAIT_BRANCH_MOLETIMER:
                game_fsm.d = States.BRANCH_MOLETIMER
                */                
                States.BRANCH_MOLETIMER:
                    regfile_ra2 = d6 // Read temporary register (contains the Compare output)
                    debug[0] = regfile_rb_out[0]
                    debug[7:1] = b1111000
                    
                   /* case (regfile_rb_out[0]){
                        b0: 
                            debug = 8d10
                            game_fsm.d = States.DECREASE_MOLETIMER
                        
                        
                        b1: 
                            game_fsm.d = States.GAMEOVER
                            debug = 8hFF
                        
                        
                    } */                    
                    
                    if (~regfile_rb_out[0]) { // if timer is not zero
                        game_fsm.d = States.DECREASE_MOLETIMER
                    } else {
                        game_fsm.d = States.GAMEOVER
                    }
                    
                    debug = 8d10
                
                
                States.DECREASE_MOLETIMER:
                    regfile_we = 1 // Write Enabled!
                    regfile_wa = d1 // moleTimer is the Write Addr
                    regfile_ra1 = d1 // moleTimer register selected!
                    alufn = b000001 // Subtraction function selected!
                    asel = b00
                    bsel = b10 // Decimal 1 is selected
                    alu_out_sel = b000
                    game_fsm.d = States.WAIT_INPUT
                    debug = 8d11
                
                
                States.GAMEOVER:
                    debug = 8d12
                    if (button0) {
                        game_fsm.d = States.RESET_TIMER
                    }
                    else {
                        game_fsm.d = States.GAMEOVER
                    }
                
            }
            
        }
        
    }
}